type User {
  id: ID!
  name: String
}

type Message {
  id: ID!
  sender: User!
  content: String!
  channel: Channel!
  sent_at: Int!
}

type Channel {
  id: ID!
  display_name: String!
  users: [User]!
  messages(last: ID, count: Int): Message
  message_view(user_id: ID!, last: Int!, count: Int!): [MessageView]!
}

type MessageView {
  user: User!
  order: Int!
  message: Message!
  seen: Boolean!
  time: Int
}

type Query {
  unreadMessages: [Message]!
  me: ID!
}

input CreateMessageInput {
  content: String!
  channel: ID!
}

type Mutation {
  createMessage(input: CreateMessageInput): Message
  readMessage(message: ID!): Null
  markAllAsRead: Null
}

type Subscription {
  message: Message
}
