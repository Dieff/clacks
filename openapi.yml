openapi: "3.0.2"
info:
  title: Clacks Server-side API
  version: "0.0.1"
servers:
  - url: https://localhost:7999/api/v1
paths:
  /healthz:
    summary: "server health check"
    get:
      responses:
        "200":
          description: "Returns 200 if everything is working"
  /channel:
    get:
      summary: "View current channels"
      responses:
        "200":
          description: "A JSON array of channels. Does not include channel members."
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    displayName:
                      type: "string"
                    id:
                      type: "number"
    post:
      summary: "Create a new channel"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                displayName:
                  type: "string"
                initialUsers:
                  type: "array"
                  items:
                    type: "string"
      responses:
        "200":
          description: "A channel was successfully created"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  id:
                    type: "number"
  /channel/{channelId}:
    get:
      summary: "gets information about a channel, including users"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "Channel Data"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  displayName:
                    type: "string"
                  users:
                    type: "array"
                    items:
                      type: "string"
    delete:
      summary: "Deletes a channel"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "The operation finished successfully"
  /channel/{channelId}/users:
    get:
      summary: "The users in a channel"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: A JSON array of users in a channel
          content:
            "application/json":
              schema:
                type: array
                items:
                  type: "string"
        "404":
          description: "The channel could not be found"
    put:
      summary: "Add a user to the channel"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        description: "The user id"
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                uid:
                  type: "string"
      responses:
        "200":
          description: "The user was added to the channel."
        "404":
          description: "The channel could not be found."
  /channel/{channelId}/users/{uid}:
    delete:
      summary: "Removes a user from the channel"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "uid"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The operation completed successfully"
  /jwt/{uid}:
    get:
      summary: "gets a valid JWT for a user"
      parameters:
        - name: "uid"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "A JWT"
          content:
            "application/json":
              schema:
                type: "string"
